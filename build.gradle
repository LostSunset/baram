import org.gradle.work.Incremental
import org.gradle.work.InputChanges
import org.gradle.api.DefaultTask
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.Property

abstract class IncrementalConvertTask extends DefaultTask {
    @Incremental
    //@PathSensitive(PathSensitivity.NAME_ONLY)
    @InputFiles
    abstract ConfigurableFileCollection getSourceFiles();


    @TaskAction
    void execute(InputChanges inputChanges) {
        println(inputChanges.incremental
                ? 'Executing incrementally'
                : 'Executing non-incrementally'
        )

        sourceFiles.each { f ->
            println "jake sourceFiles ${f.getPath()}"
        }

        inputChanges.getFileChanges(sourceFiles).each { change ->
            if (change.fileType == FileType.DIRECTORY) return

            def srcPath = change.normalizedPath

            println "${change.changeType}: ${srcPath}"


            def dstPath = srcPath.substring(0, srcPath.length()-3)+'_ui.py'

            if (change.changeType == ChangeType.REMOVED) {
                def targetFile = file(srcPath.substring(0, srcPath.length()-3)+'_ui.py').get().asFile
                targetFile.delete()
            } else {
                def cmdLine = "pyside6-uic $change.file.path -o $dstPath"
                println("cmdLine " +cmdLine)

                def proc = cmdLine.execute()
                proc.waitForProcessOutput(System.out, System.err)
            }

        }
    }
}


task convertUI(type: IncrementalConvertTask) {
    def uiFiles = fileTree('view')
    uiFiles.include('**/*.ui')
    sourceFiles.setFrom(uiFiles)

    def oFiles = uiFiles.collect {f ->
        file(f.getPath().replaceFirst(/\.ui$/, "_ui.py"))
    }
    outputs.files(oFiles)
}



